package de.m3usuite.remote

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import androidx.datastore.preferences.core.*
import androidx.datastore.preferences.preferencesDataStore
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.launch
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody.Companion.toRequestBody
import okhttp3.logging.HttpLoggingInterceptor
import net.schmizz.sshj.SSHClient
import net.schmizz.sshj.transport.verification.PromiscuousVerifier
import timber.log.Timber
import java.net.DatagramPacket
import java.net.DatagramSocket
import java.net.InetAddress

// DataStore
private val Context.dataStore by preferencesDataStore("m3usuite_remote")

// Keys
private object Prefs {
    val SSH_HOST = stringPreferencesKey("ssh_host")
    val SSH_USER = stringPreferencesKey("ssh_user")
    val SSH_PASS = stringPreferencesKey("ssh_pass") // TODO: später verschlüsseln
    val PC_MAC   = stringPreferencesKey("pc_mac")
    val WOL_BCAST = stringPreferencesKey("wol_bcast")
    val WOL_PORT  = intPreferencesKey("wol_port")
    val FB_HOST   = stringPreferencesKey("fb_host")
    val FB_USER   = stringPreferencesKey("fb_user")
    val FB_PASS   = stringPreferencesKey("fb_pass") // TODO: später verschlüsseln
}

class MainActivity : ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        // Timber initialisieren (einfach)
        Timber.plant(timber.log.Timber.DebugTree())

        setContent {
            MaterialTheme {
                AppScaffold()
            }
        }
    }
}

@Composable
private fun AppScaffold() {
    val tabs = listOf("Setup", "Terminal")
    var selectedTab by remember { mutableStateOf(0) }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(stringResource(R.string.app_name)) }
            )
        },
        bottomBar = {
            NavigationBar {
                tabs.forEachIndexed { i, title ->
                    NavigationBarItem(
                        selected = selectedTab == i,
                        onClick = { selectedTab = i },
                        icon = { },
                        label = { Text(title) }
                    )
                }
            }
        }
    ) { padding ->
        Box(Modifier.padding(padding)) {
            when (selectedTab) {
                0 -> SetupScreen()
                1 -> TerminalScreen()
            }
        }
    }
}

@Composable
private fun SetupScreen() {
    val ctx = LocalContext.current
    val scope = rememberCoroutineScope()
    val defaults = remember {
        mapOf(
            Prefs.SSH_HOST to "192.168.178.20",
            Prefs.SSH_USER to "user",
            Prefs.PC_MAC to "00:11:22:33:44:55",
            Prefs.WOL_BCAST to "192.168.178.255",
            Prefs.WOL_PORT to 9,
            Prefs.FB_HOST to "http://192.168.178.1:49000",
            Prefs.FB_USER to "fritzuser"
        )
    }

    // State laden
    val settingsFlow = ctx.dataStore.data.map { prefs ->
        SetupState(
            sshHost = prefs[Prefs.SSH_HOST] ?: defaults[Prefs.SSH_HOST] as String,
            sshUser = prefs[Prefs.SSH_USER] ?: defaults[Prefs.SSH_USER] as String,
            sshPass = prefs[Prefs.SSH_PASS] ?: "",
            pcMac   = prefs[Prefs.PC_MAC]   ?: defaults[Prefs.PC_MAC] as String,
            wolBcast= prefs[Prefs.WOL_BCAST]?: defaults[Prefs.WOL_BCAST] as String,
            wolPort = prefs[Prefs.WOL_PORT] ?: defaults[Prefs.WOL_PORT] as Int,
            fbHost  = prefs[Prefs.FB_HOST]  ?: defaults[Prefs.FB_HOST] as String,
            fbUser  = prefs[Prefs.FB_USER]  ?: defaults[Prefs.FB_USER] as String,
            fbPass  = prefs[Prefs.FB_PASS]  ?: ""
        )
    }

    val state by settingsFlow.collectAsState(initial = SetupState())

    // Editierbarer State
    var sshHost by remember { mutableStateOf(state.sshHost) }
    var sshUser by remember { mutableStateOf(state.sshUser) }
    var sshPass by remember { mutableStateOf(state.sshPass) }
    var pcMac   by remember { mutableStateOf(state.pcMac) }
    var wolB    by remember { mutableStateOf(state.wolBcast) }
    var wolPort by remember { mutableStateOf(state.wolPort) }
    var fbHost  by remember { mutableStateOf(state.fbHost) }
    var fbUser  by remember { mutableStateOf(state.fbUser) }
    var fbPass  by remember { mutableStateOf(state.fbPass) }

    val scroll = rememberScrollState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(scroll)
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        Text("Remote‑Setup", style = MaterialTheme.typography.titleLarge)

        // SSH
        OutlinedTextField(sshHost, { sshHost = it }, label = { Text("SSH Host / IP") }, modifier = Modifier.fillMaxWidth())
        OutlinedTextField(sshUser, { sshUser = it }, label = { Text("SSH Benutzer") }, modifier = Modifier.fillMaxWidth())
        OutlinedTextField(sshPass, { sshPass = it }, label = { Text("SSH Passwort") },
            visualTransformation = PasswordVisualTransformation(), modifier = Modifier.fillMaxWidth())

        // WOL
        OutlinedTextField(pcMac, { pcMac = it }, label = { Text("PC MAC (WOL)") }, modifier = Modifier.fillMaxWidth())
        OutlinedTextField(wolB, { wolB = it }, label = { Text("Broadcast IP (WOL)") }, modifier = Modifier.fillMaxWidth())
        OutlinedTextField(wolPort.toString(), {
            wolPort = it.toIntOrNull() ?: 9
        }, label = { Text("WOL Port") }, modifier = Modifier.fillMaxWidth())

        // Fritz!Box TR-064
        OutlinedTextField(fbHost, { fbHost = it }, label = { Text("Fritz!Box TR‑064 Base (z. B. http://192.168.178.1:49000)") }, modifier = Modifier.fillMaxWidth())
        OutlinedTextField(fbUser, { fbUser = it }, label = { Text("Fritz!Box Benutzer") }, modifier = Modifier.fillMaxWidth())
        OutlinedTextField(fbPass, { fbPass = it }, label = { Text("Fritz!Box Passwort") },
            visualTransformation = PasswordVisualTransformation(), modifier = Modifier.fillMaxWidth())

        Row(horizontalArrangement = Arrangement.spacedBy(12.dp)) {
            Button(onClick = {
                scope.launch {
                    savePrefs(ctx, sshHost, sshUser, sshPass, pcMac, wolB, wolPort, fbHost, fbUser, fbPass)
                    Timber.i("Gespeichert.")
                }
            }) { Text("Speichern") }

            Button(onClick = {
                scope.launch {
                    try {
                        sendWakeOnLan(pcMac, wolB, wolPort)
                        Timber.i("WOL gesendet an $pcMac via $wolB:$wolPort")
                    } catch (t: Throwable) {
                        Timber.e(t, "WOL fehlgeschlagen")
                    }
                }
            }) { Text("PC aufwecken (WOL)") }
        }

        Button(onClick = {
            scope.launch {
                // TR-064 Wake (Digest-Auth TODO – siehe Kommentar in Funktion)
                try {
                    val ok = fritzWakeOnLanByMac(fbBaseUrl = fbHost, username = fbUser, password = fbPass, mac = pcMac)
                    Timber.i("TR‑064 Wake result: $ok")
                } catch (t: Throwable) {
                    Timber.e(t, "TR‑064 Wake fehlgeschlagen")
                }
            }
        }) { Text("PC aufwecken (Fritz!Box TR‑064)") }
    }
}

@Composable
private fun TerminalScreen() {
    val ctx = LocalContext.current
    val scope = rememberCoroutineScope()
    var out by remember { mutableStateOf("") }
    var cmd by remember { mutableStateOf("wsl.exe -l -v") } // Beispiel: Windows-SSH -> prüft WSL

    val settingsFlow = ctx.dataStore.data.map { prefs ->
        Triple(
            prefs[Prefs.SSH_HOST] ?: "",
            prefs[Prefs.SSH_USER] ?: "",
            prefs[Prefs.SSH_PASS] ?: ""
        )
    }
    val (host, user, pass) by settingsFlow.collectAsState(initial = Triple("", "", ""))

    Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {
        Text("Terminal (SSH‑Einzelbefehl)", style = MaterialTheme.typography.titleLarge)
        Text("Host: $host – User: $user")

        OutlinedTextField(cmd, { cmd = it }, label = { Text("Befehl") }, modifier = Modifier.fillMaxWidth())

        Row(horizontalArrangement = Arrangement.spacedBy(12.dp)) {
            Button(onClick = {
                scope.launch {
                    out += "\n$ $cmd\n"
                    val res = runCatching { sshExec(host, user, pass, cmd) }.getOrElse {
                        out += "[Fehler] ${it.message}\n"
                        Timber.e(it)
                        return@launch
                    }
                    out += res + "\n"
                }
            }) { Text("Ausführen") }

            Button(onClick = { out = "" }) { Text("Clear") }
        }

        Divider()
        Text(out)
    }
}

// ---------- Persistenz ----------
private suspend fun savePrefs(
    ctx: Context,
    sshHost: String, sshUser: String, sshPass: String,
    pcMac: String, wolBcast: String, wolPort: Int,
    fbHost: String, fbUser: String, fbPass: String
) {
    ctx.dataStore.edit { p ->
        p[Prefs.SSH_HOST] = sshHost
        p[Prefs.SSH_USER] = sshUser
        p[Prefs.SSH_PASS] = sshPass
        p[Prefs.PC_MAC]   = pcMac
        p[Prefs.WOL_BCAST]= wolBcast
